include(FindPkgConfig)
project(hmi-display)
cmake_minimum_required(VERSION 3.0)

if(ENABLE_COVERAGE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftest-coverage")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")
endif()

#add_subdirectory(dds)
#add_subdirectory(display)

include_directories(../video)
include_directories(./video)
include_directories(${CMAKE_BINARY_DIR}/external/rtp-payloader/src)
include_directories(${CMAKE_BINARY_DIR}/external/libnmea/src/include)
include_directories(${CMAKE_BINARY_DIR}/external/libosmscout/src/libosmscout/include)
include_directories(${CMAKE_BINARY_DIR}/external/libosmscout/src/libosmscout-map/include)
include_directories(${CMAKE_BINARY_DIR}/external/libosmscout/src/libosmscout-map-cairo/include)
include_directories(${CMAKE_BINARY_DIR}/external/libosmscout/build/libosmscout/include)
include_directories(${CMAKE_BINARY_DIR}/external/libosmscout/build/libosmscout-map/include)
include_directories(${CMAKE_BINARY_DIR}/external/libosmscout/build/libosmscout-map-cairo/include)
include_directories(${PROJECT_SOURCE_DIR}/../libosmscout/libosmscout/include)
include_directories(${PROJECT_SOURCE_DIR}/../libosmscout/libosmscout-map/include)
include_directories(${PROJECT_SOURCE_DIR}/../libosmscout/libosmscout-map-cairo/include)
link_directories(${CMAKE_BINARY_DIR}/external/libosmscout/build/libosmscout-map-cairo)
link_directories(${CMAKE_BINARY_DIR}/external/libosmscout/build/libosmscout)
link_directories(${CMAKE_BINARY_DIR}/external/libosmscout/build/libosmscout-map)
link_directories(${CMAKE_BINARY_DIR}/external/Fast-RTPS/build/thirdparty/fastcdr/src/cpp)
link_directories(${CMAKE_BINARY_DIR}/external/Fast-RTPS/build/src/cpp)
link_directories(${CMAKE_BINARY_DIR}/external/rtp-payloader/build)
link_directories(${CMAKE_BINARY_DIR}/external/libnmea/build/src)

message ("Platform " ${CMAKE_SYSTEM_NAME} " : " ${CMAKE_SYSTEM} ${MSYS} ${MSYS2}) 
if (${CMAKE_SYSTEM_NAME} MATCHES "MINGW64_NT-10.0-17763")
else()
find_package(Protobuf REQUIRED)
message(STATUS "Using Protocol Buffers ${Protobuf_VERSION}...")
include_directories(${Protobuf_INCLUDE_DIRS})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS config.proto)
endif()

add_executable(hmi-display ${PROTO_SRCS} main.cc renderer.cc renderer_cairo.cc renderer_gva.cc screen_gva.cc events_gva.cc ./common/debug.cc ./common/log_gva.cc hmi_gva.cc hmi_gva_helpers.cc view_gva.cc renderer_map.cc config_reader.cc)
add_dependencies(hmi-display libosmscout hmi-video)
target_link_libraries (hmi-display Geographic osmscout osmscout_map osmscout_map_cairo ${Protobuf_LIBRARIES})
add_subdirectory(common)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w -std=c++11")
pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
pkg_check_modules(CAIRO REQUIRED cairo)
pkg_check_modules(PANGO REQUIRED pango)
pkg_check_modules(SWSCALE REQUIRED libswscale)
link_directories(${CMAKE_BINARY_DIR}/external/rtp-payloader/build)
link_directories(${CMAKE_BINARY_DIR}/external/libnmea/build/src)
target_link_libraries(hmi-display png pthread hmi-video rtp-payloader nmealib dds)
target_link_libraries(hmi-display ${CAIRO_LIBRARIES} ${PANGO_LIBRARIES} ${SWSCALE_LIBRARIES} ${GTK3_LIBRARIES})
target_include_directories(hmi-display PUBLIC ${CAIRO_INCLUDE_DIRS} ${PANGO_INCLUDE_DIRS} ${SWSCALE_INCLUDE_DIRS} ${GTK3_INCLUDE_DIRS} common dds dds/location display)
target_compile_options(hmi-display PUBLIC ${CAIRO_CFLAGS_OTHER} ${GTK3_CFLAGS_OTHER})
install(TARGETS hmi-display DESTINATION bin)

